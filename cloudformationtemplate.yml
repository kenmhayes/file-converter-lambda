AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates lambda function and S3 bucket necessary for the file conversion functionality

Parameters:
  BucketName:
    Type: String
    Default: 'file-conversion-storage'
  QueueName:
    Type: String
    Default: 'file-conversion-queue'
  LambdaFunctionName:
    Type: String
    Default: 'ConvertFile'
  LambdaSourceBucket:
    Type: String
    Default: 'code-artifacts-omni-file-converter'
  LambdaSourceKey:
    Type: String
    Default: 'FileConverterLambda-0.1.0.zip'
  IdentityPoolName:
    Type: String
    Default: 'omni-file-converter'
  RestAPIId:
    Type: String


Resources:
  StatusQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueName
  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref 'AWS::AccountId'
            Action:
              - 'sqs:SendMessage'
              - 'sqs:GetQueueUrl'
      Queues:
        -  !Ref StatusQueue
  ConverterLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'FileStoreS3'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: !Sub 'arn:aws:s3:::${BucketName}/*'
        - PolicyName: 'CloudWatchLogs'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*'
        - PolicyName: 'StatusQueue'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                  - 'sqs:GetQueueUrl'
                Resource: !GetAtt 'StatusQueue.Arn'
  ConverterLambdaFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: 'ConverterLambdaExecutionRole'
    Properties:
      Code:
        S3Bucket: !Ref LambdaSourceBucket
        S3Key: !Ref LambdaSourceKey
      Description: 'Converts files from one type to another'
      Environment:
        Variables:
          QueueName: !Ref QueueName
      Handler: 'converter.LambdaHandler::handleRequest'
      FunctionName: !Ref LambdaFunctionName
      MemorySize: 1024
      Role: !GetAtt 'ConverterLambdaExecutionRole.Arn'
      Runtime: 'java11'
      Timeout: 300
  ConverterLambdaPermissions:
    Type: 'AWS::Lambda::Permission'
    DependsOn: 'ConverterLambdaFunction'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaFunctionName
      Principal: 's3.amazonaws.com'
      SourceAccount: !Sub '${AWS::AccountId}'
      SourceArn: !Sub 'arn:aws:s3:::${BucketName}'
  FileStoreS3:
    Type: 'AWS::S3::Bucket'
    DependsOn: 'ConverterLambdaPermissions'
    Properties:
      BucketName: !Ref BucketName
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - 'GET'
              - 'HEAD'
              - 'PUT'
              - 'POST'
              - 'DELETE'
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - 'x-amz-server-side-encryption'
              - 'x-amz-request-id'
              - 'x-amz-id-2'
              - 'ETag'
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 8
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:Put'
            Filter:
              S3Key:
                Rules:
                  - Name: 'prefix'
                    Value: 'original'
            Function: !GetAtt 'ConverterLambdaFunction.Arn'
  FileStoreS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref BucketName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:*'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${BucketName}/*'
            Principal:
              AWS: !Sub '${AWS::AccountId}'
  CognitoIdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      AllowUnauthenticatedIdentities: true
      IdentityPoolName: !Ref IdentityPoolName
  CognitoRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: 'unauthenticated'
      Policies:
        - PolicyName: 'FileStoreS3'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: !Sub 'arn:aws:s3:::${BucketName}/*'
        - PolicyName: 'SessionAPI'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'execute-api:Invoke'
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*/*/*'
  CognitoIdentityPoolRoleAttachment:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    DependsOn:
      - 'CognitoIdentityPool'
      - 'CognitoRole'
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        "unauthenticated": !GetAtt 'CognitoRole.Arn'



